//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using example.soapcore_test;

[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
[System.ServiceModel.ServiceContractAttribute(Name="soapcore-test", Namespace="http://www.example.org/soapcore-test/", ConfigurationName="soapcoretest")]
public interface soapcoretest
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.example.org/soapcore-test/NewOperation", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
    [return: System.ServiceModel.MessageParameterAttribute(Name="response")]
    bool NewOperation(string id, SampleData data);
    
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
public interface soapcoretestChannel : soapcoretest, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
public partial class soapcoretestClient : System.ServiceModel.ClientBase<soapcoretest>, soapcoretest
{
    
    /// <summary>
    /// Implemente este método parcial para configurar el punto de conexión de servicio.
    /// </summary>
    /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
    /// <param name="clientCredentials">Credenciales de cliente</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
    
    public soapcoretestClient() : 
            base(soapcoretestClient.GetDefaultBinding(), soapcoretestClient.GetDefaultEndpointAddress())
    {
        this.Endpoint.Name = EndpointConfiguration.soapcore_testSOAP.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public soapcoretestClient(EndpointConfiguration endpointConfiguration) : 
            base(soapcoretestClient.GetBindingForEndpoint(endpointConfiguration), soapcoretestClient.GetEndpointAddress(endpointConfiguration))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public soapcoretestClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
            base(soapcoretestClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public soapcoretestClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(soapcoretestClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public soapcoretestClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public bool NewOperation(string id, SampleData data)
    {
        return base.Channel.NewOperation(id, data);
    }
    
    private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.soapcore_testSOAP))
        {
            System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
            result.MaxBufferSize = int.MaxValue;
            result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            result.MaxReceivedMessageSize = int.MaxValue;
            result.AllowCookies = true;
            return result;
        }
        throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
    }
    
    private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.soapcore_testSOAP))
        {
            return new System.ServiceModel.EndpointAddress("http://www.example.org/");
        }
        throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
    }
    
    private static System.ServiceModel.Channels.Binding GetDefaultBinding()
    {
        return soapcoretestClient.GetBindingForEndpoint(EndpointConfiguration.soapcore_testSOAP);
    }
    
    private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
    {
        return soapcoretestClient.GetEndpointAddress(EndpointConfiguration.soapcore_testSOAP);
    }
    
    public enum EndpointConfiguration
    {
        
        soapcore_testSOAP,
    }
}
